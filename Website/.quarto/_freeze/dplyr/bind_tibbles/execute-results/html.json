{
  "hash": "edf055ce206721db51f759d9ccae6070",
  "result": {
    "markdown": "---\ntitle: \"Bind tibbles\"\n---\n\n\n__Tibbles__ can be bound together to create a new __tibble__ with:\n\n- `dplyr::bind_cols()`: Bind __tibbles__ side by side.\n- `dplyr::bind_rows()`: Bind __tibbles__ on top of each other.\n\n[Tidyverse reference page](https://dplyr.tidyverse.org//reference/add_rows_and_columns.html)\n\n## Create example tibbles\n\nBefore demonstrating various examples we will create a few __tibbles__.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_tbl <- tibble::tibble(x = 1:3, y = 4:6, z = 7:9)\nnum_tbl_2 <- tibble::tibble(aa = 11:13, ab = 14:16, ac = 17:19)\nnum_tbl_3 <- tibble::tibble(x = 4:6, y = 7:9, z = 10:12)\n```\n:::\n\n\n## Bind by columns\n\n<center>\n![](images/dplyr_bind_cols.png){style=\"width:200px\"}\n</center>\n\nBind 2 or more __tibbles__ by columns.\nIn other words you will end up with more columns and the same amount of rows.\n\nWe will bind the two following __tibbles__ by columns.\n\n__Note__ that the two __tibbles__ must have the same amount of rows.\nAdditionally, they should have completely unique column names compared to each other.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n      x     y     z\n  <int> <int> <int>\n1     1     4     7\n2     2     5     8\n3     3     6     9\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_tbl_2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n     aa    ab    ac\n  <int> <int> <int>\n1    11    14    17\n2    12    15    18\n3    13    16    19\n```\n:::\n:::\n\n\nColumn bind\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_tbl_col_bound <- dplyr::bind_cols(num_tbl, num_tbl_2)\nnum_tbl_col_bound\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 6\n      x     y     z    aa    ab    ac\n  <int> <int> <int> <int> <int> <int>\n1     1     4     7    11    14    17\n2     2     5     8    12    15    18\n3     3     6     9    13    16    19\n```\n:::\n:::\n\n\n## Bind by rows\n\n<center>\n![](images/dplyr_bind_rows.png){style=\"width:200px\"}\n</center>\n\nBind 2 or more __tibbles__ by rows with `dplyr::bind_rows()`.\nIn other words you will end up with more rows and the same amount of columns.\n\nWe will bind the two following __tibbles__ by rows.\n\n__Note__ that the two __tibbles__ must have the same amount of columns.\nAdditionally, they should have the same column names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n      x     y     z\n  <int> <int> <int>\n1     1     4     7\n2     2     5     8\n3     3     6     9\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_tbl_3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n      x     y     z\n  <int> <int> <int>\n1     4     7    10\n2     5     8    11\n3     6     9    12\n```\n:::\n:::\n\n\nRow bind\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_tbl_row_bound <- dplyr::bind_rows(num_tbl, num_tbl_3)\nnum_tbl_row_bound\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n      x     y     z\n  <int> <int> <int>\n1     1     4     7\n2     2     5     8\n3     3     6     9\n4     4     7    10\n5     5     8    11\n6     6     9    12\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}