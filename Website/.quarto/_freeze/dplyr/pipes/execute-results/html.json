{
  "hash": "9f691a80f0bfcdc2dfb80ec4d51634cd",
  "result": {
    "markdown": "---\ntitle: \"Pipes\"\n---\n\n<center>\n![](images/dplyr_pipe.png){style=\"width:150px\"}\n</center>\n\n\nThe preferred method when using `dplyr` and other __tidyverse__ package functions is to use pipes.\n\nThe __tidyverse__ pipe symbol is `|>` (historically it was `%>%`).\n\nPipes allow you to more easily combine multiple functions together with a logical flow.\nA big advantage of pipes is that they are generally easier to read compared to nesting functions within each other.\n\nThis page will give a brief introduction to pipes using various functions that are covered in other pages of this section.\nOther pages will demonstrate further examples of pipes.\n\n## Dataset\n\nFor demonstration we'll load the `hbr_maples` data from the [lterdatasampler package](/datasets/lterdatasampler.qmd) (hyperlink includes install instructions).\n\n__Note:__ When piping, the first variable of the post pipe function is the piped data/object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Load package\nlibrary(\"lterdatasampler\")\n#hbr_maples tibble for demonstration\nmaples_tbl <- tibble::as_tibble(lterdatasampler::hbr_maples)\nmaples_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 359 × 11\n    year watershed elevation transect sample stem_length leaf1area leaf2area\n   <dbl> <fct>     <fct>     <fct>    <fct>        <dbl>     <dbl>     <dbl>\n 1  2003 Reference Low       R1       1             86.9     13.8      12.1 \n 2  2003 Reference Low       R1       2            114       14.6      15.3 \n 3  2003 Reference Low       R1       3             83.5     12.5       9.73\n 4  2003 Reference Low       R1       4             68.1      9.97     10.1 \n 5  2003 Reference Low       R1       5             72.1      6.84      5.48\n 6  2003 Reference Low       R1       6             77.7      9.66      7.64\n 7  2003 Reference Low       R1       7             85.5      8.82      9.23\n 8  2003 Reference Low       R1       8             81.6      5.83      6.18\n 9  2003 Reference Low       R1       9             92.9      8.11      7.13\n10  2003 Reference Low       R1       10            59.6      3.02      3.44\n# ℹ 349 more rows\n# ℹ 3 more variables: leaf_dry_mass <dbl>, stem_dry_mass <dbl>,\n#   corrected_leaf_area <dbl>\n```\n:::\n:::\n\n\n## One step pipe\n\nBelow is a one step pipe command.\nIn it we pipe our __tibble__ `maples_tbl` into the function [`slice()`](/dplyr/filter.qmd) to extract rows 1:5.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmaples_tbl |> dplyr::slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 11\n   year watershed elevation transect sample stem_length leaf1area leaf2area\n  <dbl> <fct>     <fct>     <fct>    <fct>        <dbl>     <dbl>     <dbl>\n1  2003 Reference Low       R1       1             86.9     13.8      12.1 \n2  2003 Reference Low       R1       2            114       14.6      15.3 \n3  2003 Reference Low       R1       3             83.5     12.5       9.73\n4  2003 Reference Low       R1       4             68.1      9.97     10.1 \n5  2003 Reference Low       R1       5             72.1      6.84      5.48\n# ℹ 3 more variables: leaf_dry_mass <dbl>, stem_dry_mass <dbl>,\n#   corrected_leaf_area <dbl>\n```\n:::\n:::\n\n\nThe above command acts the same as the below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::slice(maples_tbl,1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 11\n   year watershed elevation transect sample stem_length leaf1area leaf2area\n  <dbl> <fct>     <fct>     <fct>    <fct>        <dbl>     <dbl>     <dbl>\n1  2003 Reference Low       R1       1             86.9     13.8      12.1 \n2  2003 Reference Low       R1       2            114       14.6      15.3 \n3  2003 Reference Low       R1       3             83.5     12.5       9.73\n4  2003 Reference Low       R1       4             68.1      9.97     10.1 \n5  2003 Reference Low       R1       5             72.1      6.84      5.48\n# ℹ 3 more variables: leaf_dry_mass <dbl>, stem_dry_mass <dbl>,\n#   corrected_leaf_area <dbl>\n```\n:::\n:::\n\n\nTo assign the output of piped function you can utilise the assignment operator as usual.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmaples_subset_tbl <- maples_tbl |> dplyr::slice(1:7)\nmaples_subset_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 11\n   year watershed elevation transect sample stem_length leaf1area leaf2area\n  <dbl> <fct>     <fct>     <fct>    <fct>        <dbl>     <dbl>     <dbl>\n1  2003 Reference Low       R1       1             86.9     13.8      12.1 \n2  2003 Reference Low       R1       2            114       14.6      15.3 \n3  2003 Reference Low       R1       3             83.5     12.5       9.73\n4  2003 Reference Low       R1       4             68.1      9.97     10.1 \n5  2003 Reference Low       R1       5             72.1      6.84      5.48\n6  2003 Reference Low       R1       6             77.7      9.66      7.64\n7  2003 Reference Low       R1       7             85.5      8.82      9.23\n# ℹ 3 more variables: leaf_dry_mass <dbl>, stem_dry_mass <dbl>,\n#   corrected_leaf_area <dbl>\n```\n:::\n:::\n\n\n## Multi step pipe\n\nPipes are great when you need to use multiple functions on one object.\n\nIn the below case we:\n\n- Extract rows 1 to 1000 with [`dplyr::slice()`](/dplyr/slice.qmd)\n- Then filter the 1000 rows so we only retain observations/rows where the elevation column value is equal to \"Low\" with [`dplyr::filter()`](/dplyr/filter.qmd)\n- Select columns leaf1area and leaf2area with [`dplyr::select()`](/dplyr/select.qmd)\n- Summarise the resulting __tibble__ with `summary()`\n\n__Note:__ Pipes are not only limited to __tidyverse__ functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmaples_tbl |> \n    #Extract indexes 1 to 1000\n    dplyr::slice(1:1000) |>\n    #Extract only low elevation samples\n    dplyr::filter(elevation == \"Low\") |>\n    #Select the columns leaf1area and leaf2area\n    dplyr::select(c(leaf1area,leaf2area)) |>\n    #Summarise tibble\n    summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   leaf1area        leaf2area     \n Min.   : 2.480   Min.   : 3.444  \n 1st Qu.: 9.308   1st Qu.: 9.548  \n Median :12.110   Median :11.891  \n Mean   :12.239   Mean   :12.305  \n 3rd Qu.:15.405   3rd Qu.:15.588  \n Max.   :26.198   Max.   :24.235  \n```\n:::\n:::\n\n\nLess visually clear method with nested functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(dplyr::select(dplyr::filter(dplyr::slice(maples_tbl,1:1000),elevation==\"Low\"),c(leaf1area,leaf2area)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   leaf1area        leaf2area     \n Min.   : 2.480   Min.   : 3.444  \n 1st Qu.: 9.308   1st Qu.: 9.548  \n Median :12.110   Median :11.891  \n Mean   :12.239   Mean   :12.305  \n 3rd Qu.:15.405   3rd Qu.:15.588  \n Max.   :26.198   Max.   :24.235  \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}