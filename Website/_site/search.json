[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NEOF Advanced R community analysis",
    "section": "",
    "text": "This is the Website ofr the NEOF Advance R community analysis workshop."
  },
  {
    "objectID": "setup/setup.html",
    "href": "setup/setup.html",
    "title": "Setup",
    "section": "",
    "text": "Setup"
  },
  {
    "objectID": "upset/upset.html",
    "href": "upset/upset.html",
    "title": "Upset",
    "section": "",
    "text": "Intro to upset plot explaining what it is\nShow an example\nSay what we will do here"
  },
  {
    "objectID": "upset/code.html",
    "href": "upset/code.html",
    "title": "CODE tiujhioupiao",
    "section": "",
    "text": "CODE tiujhioupiao\nLibraries & data\n\n#Libraries\nlibrary(\"phyloseq\")\nlibrary(\"microbiome\")\nlibrary(\"IRdisplay\")\nlibrary(\"tidyverse\")\nlibrary(\"ggupset\")\n#Data\nload(\"/pub14/tea/nsc206/NEOF/R_community/data/phyloseq.RData\")\n\nPhylum Taxa collapse\n\n#Aggregate taxa to relative abundance phylum level\n#Relative abundance used for below bar chart\n#Covered in main workbook on 10\nphylum_pseq &lt;- pseq |&gt;\n    microbiome::transform(\"compositional\") |&gt;\n    microbiome::aggregate_taxa(\"Phylum\", verbose = FALSE)\n\n\n#Simple bar chart\nphylum_bar &lt;- microbiome::plot_composition(phylum_pseq)\n#Save ggplot object as png file\nggplot2::ggsave(filename = \"./phylum_relabund_simple.png\", plot = phylum_bar,\n       device = \"png\", dpi = 300, units = \"mm\", height = 200, width = 300)\n#Display the plot in jupyter notebook\nIRdisplay::display_png(file=\"./phylum_relabund_simple.png\")\n#Looks like there may be phyla that are not in all samples so that is good\n\n\n#Upset plot only takes into consideration the presence and absence of data\n#Simplest method is to extract phyla abundance table\nphyla_df &lt;- phyloseq::otu_table(phylum_pseq)\nstr(phyla_df)\nphyla_df[1:10,1:10]\n\n\n#Convert to Tibble\n#First convert to tibble, changing row names to a column with name \"Phylum\"\nphyla_tibble &lt;- phyla_df |&gt;\n    #Need to convert phyloseq \"otu_table\" to data frame before tibble\n    as.data.frame() |&gt;\n    #Convert to tibble which is like data frame but better for tidyverse\n    #The row names become a column in tibble, \n    # therefore give the resulting column a column name of \"Phylum\"\n    tidyr::as_tibble(rownames = \"Phylum\")\nphyla_tibble[1:10,1:10]\n\n\n#Time to longify\nphyla_tibble_long &lt;- phyla_tibble |&gt;\n    tidyr::pivot_longer(!Phylum, names_to=\"Sample\", values_to=\"Abundance\")\n#Note the displayed rows have an abundance value of 0\nphyla_tibble_long[1:10,]\nnrow(phyla_tibble_long)\n\n\n#Remove rows with 0 values\n#Upset plot shows presence so we are removing the rows that represent absence (0)\nphyla_tibble_long &lt;- dplyr::filter(phyla_tibble_long, Abundance &gt; 0)\nphyla_tibble_long[1:10,]\nnrow(phyla_tibble_long)\n\n\n#Remove Abundance column and then make Sample column contain lists\n#I.e will have a row for each unique Phylum\n#Then Sample column will contain a list showing each sample the phylum is found in\n#This is the format the upset plot needs\nphyla_upset_tibble &lt;- phyla_tibble_long |&gt;\n    #Remove Abundamce column\n    dplyr::select(-Abundance) |&gt;\n    #Group tibble by the Phylum column important for next step\n    dplyr::group_by(Phylum) |&gt;\n    #Summarize Sample column so it becomes column of list variables\n    dplyr::summarize(Samples = list(Sample))\n\n\n#Jupyter notebook does not like displaying tibbles that have \n# lists as column variables\n#Therefore we will view it with str() instead\nstr(phyla_upset_tibble)\n\n\n#Two examples of Phyla and the samples they are present in\n#First row\n#Phylum\nphyla_upset_tibble |&gt; dplyr::slice(1) |&gt; dplyr::pull(Phylum)\n#List of samples it is present in\nphyla_upset_tibble |&gt; dplyr::slice(1) |&gt; dplyr::pull(Samples)\n\n\n#Seventh row\n#Phylum\nphyla_upset_tibble |&gt; dplyr::slice(7) |&gt; dplyr::pull(Phylum)\n#List of samples it is present in\nphyla_upset_tibble |&gt; dplyr::slice(7) |&gt; dplyr::pull(Samples)\n\n\n#Upset plot with bar chart\nsamples_phyla_upset_plot &lt;- phyla_upset_tibble |&gt;\n    ggplot2::ggplot(aes(x = Samples)) +\n        #Add bar chart\n        ggplot2::geom_bar() +\n        #Add upset visualisation as x axis below bar chart\n        ggupset::scale_x_upset() + \n        #Specify y axis label\n        ggplot2::labs(y=\"Phyla count\")\nggplot2::ggsave(filename = \"./sample_phylum_upset.png\", plot = samples_phyla_upset_plot,\n       device = \"png\", dpi = 300, units = \"mm\", height = 200, width = 300)\nIRdisplay::display_png(file=\"./sample_phylum_upset.png\")\n\n\n#Lets do it the other way around where the Intersection of samples \n# across Phyla will be showed\n#We'll also try to do it in one pipe starting from the initial \n# phyloseq object for demonstrative purposes\nphyla_samples_upset_plot &lt;- pseq |&gt;\n    #Convert abundances to relative/compositional abundances\n    microbiome::transform(\"compositional\") |&gt;\n    #Aggregate ASVs to phylum level\n    microbiome::aggregate_taxa(\"Phylum\", verbose = FALSE) |&gt;\n    #Extract phyla relative abundance table\n    phyloseq::otu_table() |&gt;\n    #Rather than convert to df then tibble we can extract a tibble directly\n    microbiome::otu_tibble(column.id = \"Phylum\") |&gt;\n    #Longify tibble\n    tidyr::pivot_longer(!Phylum, names_to=\"Sample\", values_to=\"Abundance\") |&gt;\n    #Filter out rows were relative abundance is 0\n    #i.e. retain rows showing presence\n    dplyr::filter(Abundance &gt; 0) |&gt;\n    #Select to remove unwanted Abundance column\n    dplyr::select(-Abundance) |&gt;\n    #Group tibble by the Sample column\n    dplyr::group_by(Sample) |&gt;\n    #Using grouping to summarise the Phylum column\n    #Results in each row having a unique phyla\n    # with a list of the samples the phylum is present in\n    dplyr::summarize(Phyla = list(Phylum)) |&gt;\n    #ggplot\n    ggplot2::ggplot(aes(x = Phyla)) +\n        #Bar chart\n        ggplot2::geom_bar() +\n        #Upset scale on x axis\n        ggupset::scale_x_upset() + \n        #Y label\n        ggplot2::labs(y=\"Sample count\")\n#Save plot to png file\nggplot2::ggsave(filename = \"./phyla_sample_upset.png\", plot = phyla_samples_upset_plot,\n       device = \"png\", dpi = 300, units = \"mm\", height = 200, width = 300)\n#Dsplay plot in jupyter notebook\nIRdisplay::display_png(file=\"./phyla_sample_upset.png\")\n\n\n#Aggregate taxa, Will not aggragate rare taxa as we want\n# all the different genera to be included in the upset plot counts\ngenus_pseq &lt;- microbiome::aggregate_taxa(pseq, \"Genus\", verbose = FALSE)\n\n\n#Convert sample abundance table to metadata abundance table\n# Extract and transpose Genus table\n#Transpose it so we can add metadata as a column\n#Column is set to Sample as \"column names\" will be samples with transpose\ngenus_tibble &lt;- genus_pseq |&gt;\n    phyloseq::otu_table() |&gt;\n    as.data.frame() |&gt; t() |&gt;\n    dplyr::as_tibble(rownames = \"Sample\")\nhead(genus_tibble)\n\n\n#Demonstration on why we don't use microbiome::otu_tibble\n#Can't easily use microbiome::otu_tibble with transpose\n#t() converts the tibble to a matrix\nmicrobiome::otu_tibble(genus_pseq, column.id = \"Sample\") |&gt;\n    t() |&gt;\n    head()\n\n\n#Metadata tibble\nmetadata_tibble &lt;- microbiome::sample_tibble(genus_pseq)\nhead(metadata_tibble)\n\n\n#bind metadata and genus tibbles\ngenus_metadata_tibble &lt;- dplyr::bind_cols(metadata_tibble, genus_tibble)\nhead(genus_metadata_tibble)\n\n\n#We are going to make an upset plot for site so we will remove \n#the other metadata columns we are not interested in\n#Therefore we will create a vector of \"site\" with the genus names\ncols_to_keep &lt;- c(\"site\", colnames(genus_tibble[,-1]))\n#Subset tibble to our desired columns\nsite_genus_tibble &lt;- genus_metadata_tibble[,cols_to_keep]\nhead(site_genus_tibble)\n\n\n#Create upset tibble where each row is a unique genus and\n# there is a site column where each row contains a list\n# of the sites the genus is present in\nsite_genus_upset_tibble  &lt;- site_genus_tibble |&gt;\n    #Longify tibble    \n    tidyr::pivot_longer(!site, names_to=\"Genus\", values_to=\"Abundance\") |&gt;\n    #Filter out rows with 0 as their abundance level\n    #I.e. remove absence\n    dplyr::filter(Abundance &gt; 0) |&gt;\n    #Remove the Abundance column\n    dplyr::select(-Abundance) |&gt;\n    #Remove duplicate rows to prevent multiple values appearing for each site\n    #Carry out with dplyr:distinct() it seems\n    dplyr::distinct() |&gt;\n    #Group by the Genus column to....\n    dplyr::group_by(Genus) |&gt;\n    #Summarise site column so each row has a unique Genus\n    # with a list of the sites each Genus is found in\n    dplyr::summarize(Sites = list(site))\n#Check structure of the first 10 rows of resulting upset tibble\nstr(site_genus_upset_tibble[1:10,])\n\n\n#Upset plot displaying number of intersecting genera, by presence, across the three sites\nupset_plot &lt;- site_genus_upset_tibble |&gt;\nggplot2::ggplot(aes(x = Sites)) +\n    ggplot2::geom_bar() +\n    ggupset::scale_x_upset() +\n    ggplot2::labs(y=\"Genera count\")\nggplot2::ggsave(filename = \"./site_genera_upset.png\", plot = upset_plot,\n       device = \"png\", dpi = 300, units = \"mm\", height = 200, width = 300)\nIRdisplay::display_png(file=\"./site_genera_upset.png\")\n\n\n#Upset plot displaying number of intersecting genera, by presence, across the media\n#Columns to keep\ncols_to_keep &lt;- c(\"media\", colnames(genus_tibble[,-1]))\n#All in one code to produce upset plot\nupset_plot &lt;- genus_metadata_tibble[,cols_to_keep] |&gt;\n    #Longify tibble\n    tidyr::pivot_longer(!media, names_to=\"Genus\", values_to=\"Abundance\") |&gt;\n    #Filter to remove rows with an abundance of 0\n    dplyr::filter(Abundance &gt; 0) |&gt;\n    #Select to remove unwanted abundance column\n    dplyr::select(-Abundance) |&gt;\n    #Remove duplicate rows to prevent multiple values appearing for each media\n    dplyr::distinct() |&gt;\n    #Group tibble by Genus column\n    dplyr::group_by(Genus) |&gt;\n    #Summarise media column so each row has a unique Genus\n    # with a list of the medias each Genus is found in\n    dplyr::summarize(Medias = list(media)) |&gt;\n    #Upset plot with ggplot2\n    ggplot2::ggplot(aes(x = Medias)) +\n        ggplot2::geom_bar() +\n        ggupset::scale_x_upset() + \n        ggplot2::labs(y=\"Genera count\")\nggplot2::ggsave(filename = \"./media_genera_upset.png\", plot = upset_plot,\n       device = \"png\", dpi = 300, units = \"mm\", height = 200, width = 300)\nIRdisplay::display_png(file=\"./media_genera_upset.png\")\n\n\n#Upset plot displaying number of intersecting genera, by presence, across the site and media combinations\n#Create a column for Site_Media\nsite_media_genus_tibble &lt;- genus_metadata_tibble |&gt;\n    tidyr::unite(site_media, c(\"site\",\"media\"), sep = \"_\")\n#Columns to keep\ncols_to_keep &lt;- c(\"site_media\", colnames(genus_tibble[,-1]))\n#Subset tibble to our desired columns\nsite_media_genus_tibble &lt;- site_media_genus_tibble[,cols_to_keep]\n#Display top 10 rows\nsite_media_genus_tibble |&gt; dplyr::slice(1:10)\n\n\n#Longify and convert to presence absence\nupset_plot  &lt;- site_media_genus_tibble %&gt;%\n    #Longify tibble\n    tidyr::pivot_longer(!site_media, names_to=\"Genus\", values_to=\"Abundance\") |&gt;\n    #Filter to remove rows with an abundance of 0\n    dplyr::filter(Abundance &gt; 0) |&gt;\n    #Select to remove unwanted abundance column\n    dplyr::select(-Abundance) |&gt;\n    #Remove duplicate rows to prevent multiple values appearing for each media\n    dplyr::distinct() |&gt;\n    #Group tibble by Genus column\n    dplyr::group_by(Genus) |&gt;\n    #Summarise site_media column so each row has a unique Genus\n    # with a list of the site and media combo each Genus is found in\n    dplyr::summarize(site_media = list(site_media)) |&gt;\n    #Upset plot with ggplot2\n    ggplot2::ggplot(aes(x = site_media)) +\n        ggplot2::geom_bar() +\n        ggupset::scale_x_upset() + \n        ggplot2::labs(x=\"Site & Media\",y=\"Genera count\")\nggplot2::ggsave(filename = \"./site_media_genera_upset.png\", plot = upset_plot,\n       device = \"png\", dpi = 300, units = \"mm\", height = 200, width = 300)\nIRdisplay::display_png(file=\"./site_media_genera_upset.png\")"
  },
  {
    "objectID": "upset/data_and_setup.html",
    "href": "upset/data_and_setup.html",
    "title": "Data & Setup",
    "section": "",
    "text": "Before you carry out any practice you will need to setup your environment by:\n\nCreating a jupyter-notebook in a new work directory.\nLoading in the required libraries.\nLoading in the data.\n\n\n\nIn jupyter-notebook file explorer create and move into a new directory called “upset”. We’ll keep each section in its own subdirectory so it is easier to keep the output files separate and tidy.\nCreate a new R based jupyter-notebook called “upset.ipynb”. At the top of the jupyter-notebook add the following headers:\n\nA first level header of “Upset plots”.\nA second level header of “Libraries & data”.\n\n\n\n\n\n#Libraries\nlibrary(\"phyloseq\")\nlibrary(\"microbiome\")\nlibrary(\"IRdisplay\")\nlibrary(\"tidyverse\")\nlibrary(\"ggupset\")\n\n\n\n\nWe have a phyloseq object containing ASV abundance data through DADA2 denoising in QIIME2 (theory & code). For our upset plots we will be utilising the Durance river data used in our R community analysis workshop. This is a 16S dataset with two main metadata groupings:\n\nSites: Upper, Middle, and Lower Durance sampling site.\nCulture media: Environmental sample (ENV), TSA, KBC, and CVP.\n\nMore info in the R community analysis workbook\nLoad in the phyloseq object.\n\n#Data\nload(\"/pub14/tea/nsc206/NEOF/R_community/data/phyloseq.RData\")"
  },
  {
    "objectID": "upset/data_and_setup.html#section",
    "href": "upset/data_and_setup.html#section",
    "title": "Data & Setup",
    "section": "",
    "text": "We have a phyloseq object containing ASV abundance data through DADA2 denoising in QIIME2 (theory & code). For our upset plots we will be utilising the Durance river data used in our R community analysis workshop. This is a 16S dataset with two main metadata groupings:\n\n3 Sites: Upper, Middle, and Lower Durance sampling site.\n4 Culture media groups: Environmental sample (ENV), TSA, KBC, and CVP.\n\nMore info in the R community analysis workbook"
  },
  {
    "objectID": "upset/data_and_setup.html#jupyter-notebook",
    "href": "upset/data_and_setup.html#jupyter-notebook",
    "title": "Data & Setup",
    "section": "",
    "text": "In jupyter-notebook file explorer create and move into a new directory called “upset”. We’ll keep each section in its own subdirectory so it is easier to keep the output files separate and tidy.\nCreate a new R based jupyter-notebook called “upset.ipynb”. At the top of the jupyter-notebook add the following headers:\n\nA first level header of “Upset plots”.\nA second level header of “Libraries & data”."
  },
  {
    "objectID": "upset/data_and_setup.html#libraries",
    "href": "upset/data_and_setup.html#libraries",
    "title": "Data & Setup",
    "section": "",
    "text": "#Libraries\nlibrary(\"phyloseq\")\nlibrary(\"microbiome\")\nlibrary(\"IRdisplay\")\nlibrary(\"tidyverse\")\nlibrary(\"ggupset\")"
  },
  {
    "objectID": "upset/data_and_setup.html#data",
    "href": "upset/data_and_setup.html#data",
    "title": "Data & Setup",
    "section": "",
    "text": "We have a phyloseq object containing ASV abundance data through DADA2 denoising in QIIME2 (theory & code). For our upset plots we will be utilising the Durance river data used in our R community analysis workshop. This is a 16S dataset with two main metadata groupings:\n\nSites: Upper, Middle, and Lower Durance sampling site.\nCulture media: Environmental sample (ENV), TSA, KBC, and CVP.\n\nMore info in the R community analysis workbook\nLoad in the phyloseq object.\n\n#Data\nload(\"/pub14/tea/nsc206/NEOF/R_community/data/phyloseq.RData\")"
  },
  {
    "objectID": "upset/simple_bar_chart.html",
    "href": "upset/simple_bar_chart.html",
    "title": "Simple bar chart",
    "section": "",
    "text": "Prior to learning more about upset plots lets first look at a simple phylum bar chart with our data.\nCreate a new header cell with the 2nd level header of “Phylum bar chart”.\n\n\nPrior to creating the bar chart we will:\n\nConvert the abundance values to relative abundances so it is easier to compare the samples.\nAggregate the taxa to phylum level.\n\nMore info about taxa plots in our R community analysis workbook\n\n#Aggregate taxa to relative abundance phylum level\nphylum_pseq &lt;- pseq |&gt;\n    microbiome::transform(\"compositional\") |&gt;\n    microbiome::aggregate_taxa(\"Phylum\", verbose = FALSE)\n\n\n\n\nCreate a simple bar chart, save it, and display it in jupyter-notebook.\n\n#Simple bar chart\nphylum_bar &lt;- microbiome::plot_composition(phylum_pseq)\n#Save ggplot object as png file\nggplot2::ggsave(filename = \"./phylum_relabund_simple.png\", plot = phylum_bar,\n       device = \"png\", dpi = 300, units = \"mm\", height = 200, width = 300)\n#Display the plot in jupyter notebook\nIRdisplay::display_png(file=\"./phylum_relabund_simple.png\")\n\nThe above code will produce the below plot/figure."
  },
  {
    "objectID": "upset/simple_bar_chart.html#data-transformation",
    "href": "upset/simple_bar_chart.html#data-transformation",
    "title": "Simple bar chart",
    "section": "",
    "text": "Prior to creating the bar chart we will:\n\nConvert the abundance values to relative abundances so it is easier to compare the samples.\nAggregate the taxa to phylum level.\n\nMore info about taxa plots in our R community analysis workbook\n\n#Aggregate taxa to relative abundance phylum level\nphylum_pseq &lt;- pseq |&gt;\n    microbiome::transform(\"compositional\") |&gt;\n    microbiome::aggregate_taxa(\"Phylum\", verbose = FALSE)"
  },
  {
    "objectID": "upset/simple_bar_chart.html#bar-chart",
    "href": "upset/simple_bar_chart.html#bar-chart",
    "title": "Simple bar chart",
    "section": "",
    "text": "Create a simple bar chart, save it, and display it in jupyter-notebook.\n\n#Simple bar chart\nphylum_bar &lt;- microbiome::plot_composition(phylum_pseq)\n#Save ggplot object as png file\nggplot2::ggsave(filename = \"./phylum_relabund_simple.png\", plot = phylum_bar,\n       device = \"png\", dpi = 300, units = \"mm\", height = 200, width = 300)\n#Display the plot in jupyter notebook\nIRdisplay::display_png(file=\"./phylum_relabund_simple.png\")\n\nThe above code will produce the below plot/figure."
  },
  {
    "objectID": "upset/upset_data_format.html",
    "href": "upset/upset_data_format.html",
    "title": "Upset data format",
    "section": "",
    "text": "Upset data format\nTheory as to the format that the data needs to be in to work for an upset plot.\nA column of lists with these lists really only containing vectors.\nDiagram of wide to long to upset tibble."
  },
  {
    "objectID": "upset/phyloseq_to_tibble.html",
    "href": "upset/phyloseq_to_tibble.html",
    "title": "Phyloseq to long presence tibble",
    "section": "",
    "text": "We need to create a long tibble containing data on all the Phyla and the samples they are present in. To carry this out we:\n\nExtract the phyloseq object’s abundance table as a tibble.\nLongify the tibble so there is a row for each phylum and sample pair with its corresponding abundance value.\nRemove rows were the abundance is 0. This retains rows where the phylum is present in the sample.\n\nWe use a tibble due to the useage of some specific tidyverse commands in downstream steps.\n\n\nTo extract the otu_table as a tibble we can use the microbiome package with its function otu_tibble().\n\n#Extract abundance table as tibble\nphyla_tibble &lt;- phylum_pseq |&gt;\n    #The row names (taxa in otu_table) become a column in tibble\n    # therefore give the resulting column a name/id of \"Phylum\"\n    microbiome::otu_tibble(column.id = \"Phylum\")\n#Display first 10 rows and columns of resulting tibble\nphyla_df[1:10,1:10]\n\n\n\n\nThe next step is to longify the tibble with tidyr::pivot_longer().\nFor our long tibble we want to:\n\nLongify all the columns except the Phylum column (!Phylum).\nMake a column with the sample names, the column names of phyla_tibble, called “Sample” (names_to=\"Sample\").\nMake a column with the abundance values, values in tibble, called “Abundance” (values_to=\"Abundance\")\n\n\n#Time to longify\nphyla_tibble_long &lt;- phyla_tibble |&gt;\n    tidyr::pivot_longer(!Phylum, names_to=\"Sample\", values_to=\"Abundance\")\n#Display first 10 rows of resulting long tibble\nphyla_tibble_long |&gt; dplyr::slice(1:10)\n\nCurrently all abundance values in the first 10 rows are all zeros. We will remove these rows next.\n\n\n\nThe upset plots we will create will show the intersection of taxa presence. We will therefore remove ros were the abundance is equal to zero as these rows represent absence. If we did not remove these rows they would be included in the upset plot creation.\n\n#Remove rows with 0 values\nphyla_tibble_long &lt;- dplyr::filter(phyla_tibble_long, Abundance &gt; 0)\n#Display first 10 rows of resulting long tibble\nphyla_tibble_long |&gt; dplyr::slice(1:10)"
  },
  {
    "objectID": "upset/phyloseq_to_tibble.html#otu_table-to-tibble",
    "href": "upset/phyloseq_to_tibble.html#otu_table-to-tibble",
    "title": "Phyloseq to long presence tibble",
    "section": "",
    "text": "To extract the otu_table as a tibble we can use the microbiome package with its function otu_tibble().\n\n#Extract abundance table as tibble\nphyla_tibble &lt;- phylum_pseq |&gt;\n    #The row names (taxa in otu_table) become a column in tibble\n    # therefore give the resulting column a name/id of \"Phylum\"\n    microbiome::otu_tibble(column.id = \"Phylum\")\n#Display first 10 rows and columns of resulting tibble\nphyla_df[1:10,1:10]"
  },
  {
    "objectID": "upset/phyloseq_to_tibble.html#longify",
    "href": "upset/phyloseq_to_tibble.html#longify",
    "title": "Phyloseq to long presence tibble",
    "section": "",
    "text": "The next step is to longify the tibble with tidyr::pivot_longer().\nFor our long tibble we want to:\n\nLongify all the columns except the Phylum column (!Phylum).\nMake a column with the sample names, the column names of phyla_tibble, called “Sample” (names_to=\"Sample\").\nMake a column with the abundance values, values in tibble, called “Abundance” (values_to=\"Abundance\")\n\n\n#Time to longify\nphyla_tibble_long &lt;- phyla_tibble |&gt;\n    tidyr::pivot_longer(!Phylum, names_to=\"Sample\", values_to=\"Abundance\")\n#Display first 10 rows of resulting long tibble\nphyla_tibble_long |&gt; dplyr::slice(1:10)\n\nCurrently all abundance values in the first 10 rows are all zeros. We will remove these rows next."
  },
  {
    "objectID": "upset/phyloseq_to_tibble.html#remove-absence",
    "href": "upset/phyloseq_to_tibble.html#remove-absence",
    "title": "Phyloseq to long presence tibble",
    "section": "",
    "text": "The upset plots we will create will show the intersection of taxa presence. We will therefore remove ros were the abundance is equal to zero as these rows represent absence. If we did not remove these rows they would be included in the upset plot creation.\n\n#Remove rows with 0 values\nphyla_tibble_long &lt;- dplyr::filter(phyla_tibble_long, Abundance &gt; 0)\n#Display first 10 rows of resulting long tibble\nphyla_tibble_long |&gt; dplyr::slice(1:10)"
  }
]