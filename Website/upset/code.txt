# CODE tiujhioupiao




```{r, eval=FALSE}
#Aggregate taxa, Will not aggragate rare taxa as we want
# all the different genera to be included in the upset plot counts
genus_pseq <- microbiome::aggregate_taxa(pseq, "Genus", verbose = FALSE)
```
```{r, eval=FALSE}
#Convert sample abundance table to metadata abundance table
# Extract and transpose Genus table
#Transpose it so we can add metadata as a column
#Column is set to Sample as "column names" will be samples with transpose
genus_tibble <- genus_pseq |>
    phyloseq::otu_table() |>
    as.data.frame() |> t() |>
    dplyr::as_tibble(rownames = "Sample")
head(genus_tibble)
```
```{r, eval=FALSE}
#Demonstration on why we don't use microbiome::otu_tibble
#Can't easily use microbiome::otu_tibble with transpose
#t() converts the tibble to a matrix
microbiome::otu_tibble(genus_pseq, column.id = "Sample") |>
    t() |>
    head()
```
```{r, eval=FALSE}
#Metadata tibble
metadata_tibble <- microbiome::sample_tibble(genus_pseq)
head(metadata_tibble)
```
```{r, eval=FALSE}
#bind metadata and genus tibbles
genus_metadata_tibble <- dplyr::bind_cols(metadata_tibble, genus_tibble)
head(genus_metadata_tibble)
```
```{r, eval=FALSE}
#We are going to make an upset plot for site so we will remove 
#the other metadata columns we are not interested in
#Therefore we will create a vector of "site" with the genus names
cols_to_keep <- c("site", colnames(genus_tibble[,-1]))
#Subset tibble to our desired columns
site_genus_tibble <- genus_metadata_tibble[,cols_to_keep]
head(site_genus_tibble)
```

```{r, eval=FALSE}
#Create upset tibble where each row is a unique genus and
# there is a site column where each row contains a list
# of the sites the genus is present in
site_genus_upset_tibble  <- site_genus_tibble |>
    #Longify tibble    
    tidyr::pivot_longer(!site, names_to="Genus", values_to="Abundance") |>
    #Filter out rows with 0 as their abundance level
    #I.e. remove absence
    dplyr::filter(Abundance > 0) |>
    #Remove the Abundance column
    dplyr::select(-Abundance) |>
    #Remove duplicate rows to prevent multiple values appearing for each site
    #Carry out with dplyr:distinct() it seems
    dplyr::distinct() |>
    #Group by the Genus column to....
    dplyr::group_by(Genus) |>
    #Summarise site column so each row has a unique Genus
    # with a list of the sites each Genus is found in
    dplyr::summarize(Sites = list(site))
#Check structure of the first 10 rows of resulting upset tibble
str(site_genus_upset_tibble[1:10,])
```
```{r, eval=FALSE}
#Upset plot displaying number of intersecting genera, by presence, across the three sites
upset_plot <- site_genus_upset_tibble |>
ggplot2::ggplot(aes(x = Sites)) +
    ggplot2::geom_bar() +
    ggupset::scale_x_upset() +
    ggplot2::labs(y="Genera count")
ggplot2::ggsave(filename = "./site_genera_upset.png", plot = upset_plot,
       device = "png", dpi = 300, units = "mm", height = 200, width = 300)
IRdisplay::display_png(file="./site_genera_upset.png")
```
```{r, eval=FALSE}
#Upset plot displaying number of intersecting genera, by presence, across the media
#Columns to keep
cols_to_keep <- c("media", colnames(genus_tibble[,-1]))
#All in one code to produce upset plot
upset_plot <- genus_metadata_tibble[,cols_to_keep] |>
    #Longify tibble
    tidyr::pivot_longer(!media, names_to="Genus", values_to="Abundance") |>
    #Filter to remove rows with an abundance of 0
    dplyr::filter(Abundance > 0) |>
    #Select to remove unwanted abundance column
    dplyr::select(-Abundance) |>
    #Remove duplicate rows to prevent multiple values appearing for each media
    dplyr::distinct() |>
    #Group tibble by Genus column
    dplyr::group_by(Genus) |>
    #Summarise media column so each row has a unique Genus
    # with a list of the medias each Genus is found in
    dplyr::summarize(Medias = list(media)) |>
    #Upset plot with ggplot2
    ggplot2::ggplot(aes(x = Medias)) +
        ggplot2::geom_bar() +
        ggupset::scale_x_upset() + 
        ggplot2::labs(y="Genera count")
ggplot2::ggsave(filename = "./media_genera_upset.png", plot = upset_plot,
       device = "png", dpi = 300, units = "mm", height = 200, width = 300)
IRdisplay::display_png(file="./media_genera_upset.png")
```
```{r, eval=FALSE}
#Upset plot displaying number of intersecting genera, by presence, across the site and media combinations
#Create a column for Site_Media
site_media_genus_tibble <- genus_metadata_tibble |>
    tidyr::unite(site_media, c("site","media"), sep = "_")
#Columns to keep
cols_to_keep <- c("site_media", colnames(genus_tibble[,-1]))
#Subset tibble to our desired columns
site_media_genus_tibble <- site_media_genus_tibble[,cols_to_keep]
#Display top 10 rows
site_media_genus_tibble |> dplyr::slice(1:10)
```
```{r, eval=FALSE}
#Longify and convert to presence absence
upset_plot  <- site_media_genus_tibble %>%
    #Longify tibble
    tidyr::pivot_longer(!site_media, names_to="Genus", values_to="Abundance") |>
    #Filter to remove rows with an abundance of 0
    dplyr::filter(Abundance > 0) |>
    #Select to remove unwanted abundance column
    dplyr::select(-Abundance) |>
    #Remove duplicate rows to prevent multiple values appearing for each media
    dplyr::distinct() |>
    #Group tibble by Genus column
    dplyr::group_by(Genus) |>
    #Summarise site_media column so each row has a unique Genus
    # with a list of the site and media combo each Genus is found in
    dplyr::summarize(site_media = list(site_media)) |>
    #Upset plot with ggplot2
    ggplot2::ggplot(aes(x = site_media)) +
        ggplot2::geom_bar() +
        ggupset::scale_x_upset() + 
        ggplot2::labs(x="Site & Media",y="Genera count")
ggplot2::ggsave(filename = "./site_media_genera_upset.png", plot = upset_plot,
       device = "png", dpi = 300, units = "mm", height = 200, width = 300)
IRdisplay::display_png(file="./site_media_genera_upset.png")
```
```{r, eval=FALSE}

```
```{r, eval=FALSE}

```
```{r, eval=FALSE}

```