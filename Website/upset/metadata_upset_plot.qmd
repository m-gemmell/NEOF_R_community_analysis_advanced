# Metadata upset plot
<center>
![](images/river_mountain.png){style="width:200px; background:white; border-radius:15px; border:white solid 10px"}
</center>

Our lasts steps are to format the data into an upset __tibble__ and then create the upset plot.

## Upset tibble
<center>
![](images/plier.png){style="width:150px; background: white; border-radius:5px; border: white 5px solid"}
</center>

Creating the upset __tibble__ is almost the same as our previous upset plots.
However, after longifying, remove absence and removing the "Abundance" column we then use the `dplyr::distinct()` function.
This removes duplicate columns, keeping only one of them.

This is important as since multiple samples belong to one metadata group we have multiple duplicated rows.
E.g. we could have 3 columns for the Achromobacter and LD pairing.

Carrying it out this way ensures that if a genus is present in at least one of the samples of a metadata group, it will be included in the interaction.

Create the upset __tibble__.

```{r, eval=FALSE}
#Create upset tibble where each row is a unique genus (group) and
# there is a site column where each row contains a list
# of the sites the genus is present in (intersection)
site_genus_upset_tibble  <- site_genus_tibble |>
	#Longify tibble    
	tidyr::pivot_longer(!site, names_to="Genus", values_to="Abundance") |>
	#Filter out rows with 0 as their abundance level
	#I.e. remove absence
	dplyr::filter(Abundance > 0) |>
	#Remove the Abundance column
	dplyr::select(-Abundance) |>
	#Remove duplicate rows to prevent multiple values appearing for each site
	#Carry out with dplyr:distinct() it seems
	dplyr::distinct() |>
	#Group by the Genus column to....
	dplyr::group_by(Genus) |>
	#Summarise site column so each row has a unique Genus
	# with a list of the sites each Genus is found in
	dplyr::summarize(Sites = list(site))
#Check structure of the first 10 rows of resulting upset tibble
site_genus_upset_tibble |> dplyr::slice(1:10) |> str()
```

## Upset plot
<center>
![](images/pencil_2.png){style="width:150px; background: white; border-radius:5px; border: white 5px solid"}
</center>

With the upset __tibble__ create the upset plot.

```{r, eval=FALSE}
#Upset plot displaying number of intersecting sites with genera as the groups
upset_plot <- site_genus_upset_tibble |>
ggplot2::ggplot(aes(x = Sites)) +
	ggplot2::geom_bar() +
	ggupset::scale_x_upset() +
	ggplot2::labs(y="Genera count")
ggplot2::ggsave(filename = "./site_genera_upset.png", plot = upset_plot,
   	device = "png", dpi = 300, units = "mm", height = 200, width = 300)
IRdisplay::display_png(file="./site_genera_upset.png")
```